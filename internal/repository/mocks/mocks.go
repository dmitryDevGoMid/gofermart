// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/dmitryDevGoMid/gofermart/internal/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetCatalogData mocks base method.
func (m *MockRepository) GetCatalogData(ctx context.Context) *repository.CatalogData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogData", ctx)
	ret0, _ := ret[0].(*repository.CatalogData)
	return ret0
}

// GetCatalogData indicates an expected call of GetCatalogData.
func (mr *MockRepositoryMockRecorder) GetCatalogData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogData", reflect.TypeOf((*MockRepository)(nil).GetCatalogData), ctx)
}

// InitCatalogData mocks base method.
func (m *MockRepository) InitCatalogData(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitCatalogData", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitCatalogData indicates an expected call of InitCatalogData.
func (mr *MockRepositoryMockRecorder) InitCatalogData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitCatalogData", reflect.TypeOf((*MockRepository)(nil).InitCatalogData), ctx)
}

// InsertAccrual mocks base method.
func (m *MockRepository) InsertAccrual(ctx context.Context, accrual *repository.Accrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccrual", ctx, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAccrual indicates an expected call of InsertAccrual.
func (mr *MockRepositoryMockRecorder) InsertAccrual(ctx, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccrual", reflect.TypeOf((*MockRepository)(nil).InsertAccrual), ctx, accrual)
}

// InsertBalance mocks base method.
func (m *MockRepository) InsertBalance(ctx context.Context, balance *repository.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBalance", ctx, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBalance indicates an expected call of InsertBalance.
func (mr *MockRepositoryMockRecorder) InsertBalance(ctx, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBalance", reflect.TypeOf((*MockRepository)(nil).InsertBalance), ctx, balance)
}

// InsertUser mocks base method.
func (m *MockRepository) InsertUser(ctx context.Context, dataUser *repository.User) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, dataUser)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockRepositoryMockRecorder) InsertUser(ctx, dataUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepository)(nil).InsertUser), ctx, dataUser)
}

// InsertWithdraw mocks base method.
func (m *MockRepository) InsertWithdraw(ctx context.Context, withdraw *repository.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWithdraw", ctx, withdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWithdraw indicates an expected call of InsertWithdraw.
func (mr *MockRepositoryMockRecorder) InsertWithdraw(ctx, withdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithdraw", reflect.TypeOf((*MockRepository)(nil).InsertWithdraw), ctx, withdraw)
}

// SelectAccrualByIDorder mocks base method.
func (m *MockRepository) SelectAccrualByIDorder(ctx context.Context, dataAccrual *repository.Accrual) (*repository.Accrual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAccrualByIDorder", ctx, dataAccrual)
	ret0, _ := ret[0].(*repository.Accrual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAccrualByIDorder indicates an expected call of SelectAccrualByIDorder.
func (mr *MockRepositoryMockRecorder) SelectAccrualByIDorder(ctx, dataAccrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccrualByIDorder", reflect.TypeOf((*MockRepository)(nil).SelectAccrualByIDorder), ctx, dataAccrual)
}

// SelectAccrualByUser mocks base method.
func (m *MockRepository) SelectAccrualByUser(ctx context.Context, dataUser *repository.User) ([]repository.AccrualList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAccrualByUser", ctx, dataUser)
	ret0, _ := ret[0].([]repository.AccrualList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAccrualByUser indicates an expected call of SelectAccrualByUser.
func (mr *MockRepositoryMockRecorder) SelectAccrualByUser(ctx, dataUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccrualByUser", reflect.TypeOf((*MockRepository)(nil).SelectAccrualByUser), ctx, dataUser)
}

// SelectAccrualByUserSum mocks base method.
func (m *MockRepository) SelectAccrualByUserSum(ctx context.Context, dataUser *repository.User) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAccrualByUserSum", ctx, dataUser)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAccrualByUserSum indicates an expected call of SelectAccrualByUserSum.
func (mr *MockRepositoryMockRecorder) SelectAccrualByUserSum(ctx, dataUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccrualByUserSum", reflect.TypeOf((*MockRepository)(nil).SelectAccrualByUserSum), ctx, dataUser)
}

// SelectAccrualForSendLoyalty mocks base method.
func (m *MockRepository) SelectAccrualForSendLoyalty(ctx context.Context, dataAccrual *[]repository.Accrual) (*[]repository.Accrual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAccrualForSendLoyalty", ctx, dataAccrual)
	ret0, _ := ret[0].(*[]repository.Accrual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAccrualForSendLoyalty indicates an expected call of SelectAccrualForSendLoyalty.
func (mr *MockRepositoryMockRecorder) SelectAccrualForSendLoyalty(ctx, dataAccrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccrualForSendLoyalty", reflect.TypeOf((*MockRepository)(nil).SelectAccrualForSendLoyalty), ctx, dataAccrual)
}

// SelectBalanceByUser mocks base method.
func (m *MockRepository) SelectBalanceByUser(ctx context.Context, dataUser *repository.User) (repository.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBalanceByUser", ctx, dataUser)
	ret0, _ := ret[0].(repository.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectBalanceByUser indicates an expected call of SelectBalanceByUser.
func (mr *MockRepositoryMockRecorder) SelectBalanceByUser(ctx, dataUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBalanceByUser", reflect.TypeOf((*MockRepository)(nil).SelectBalanceByUser), ctx, dataUser)
}

// SelectUserByEmail mocks base method.
func (m *MockRepository) SelectUserByEmail(ctx context.Context, dataUser *repository.User) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByEmail", ctx, dataUser)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByEmail indicates an expected call of SelectUserByEmail.
func (mr *MockRepositoryMockRecorder) SelectUserByEmail(ctx, dataUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByEmail", reflect.TypeOf((*MockRepository)(nil).SelectUserByEmail), ctx, dataUser)
}

// SelectWithdrawByUserSum mocks base method.
func (m *MockRepository) SelectWithdrawByUserSum(ctx context.Context, dataUser *repository.User) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWithdrawByUserSum", ctx, dataUser)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithdrawByUserSum indicates an expected call of SelectWithdrawByUserSum.
func (mr *MockRepositoryMockRecorder) SelectWithdrawByUserSum(ctx, dataUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithdrawByUserSum", reflect.TypeOf((*MockRepository)(nil).SelectWithdrawByUserSum), ctx, dataUser)
}

// SelectWithdrawByUsers mocks base method.
func (m *MockRepository) SelectWithdrawByUsers(ctx context.Context, dataUser *repository.User) ([]repository.WithdrawList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWithdrawByUsers", ctx, dataUser)
	ret0, _ := ret[0].([]repository.WithdrawList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithdrawByUsers indicates an expected call of SelectWithdrawByUsers.
func (mr *MockRepositoryMockRecorder) SelectWithdrawByUsers(ctx, dataUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithdrawByUsers", reflect.TypeOf((*MockRepository)(nil).SelectWithdrawByUsers), ctx, dataUser)
}

// UpdateAccrualByID mocks base method.
func (m *MockRepository) UpdateAccrualByID(ctx context.Context, dataAccrual *repository.Accrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccrualByID", ctx, dataAccrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccrualByID indicates an expected call of UpdateAccrualByID.
func (mr *MockRepositoryMockRecorder) UpdateAccrualByID(ctx, dataAccrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccrualByID", reflect.TypeOf((*MockRepository)(nil).UpdateAccrualByID), ctx, dataAccrual)
}
