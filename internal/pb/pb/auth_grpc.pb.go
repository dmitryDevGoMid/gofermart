// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.0
// source: auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BonusPlus_GetBonusPlus_FullMethodName = "/db.BonusPlus/GetBonusPlus"
)

// BonusPlusClient is the client API for BonusPlus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BonusPlusClient interface {
	GetBonusPlus(ctx context.Context, in *User, opts ...grpc.CallOption) (*Plus, error)
}

type bonusPlusClient struct {
	cc grpc.ClientConnInterface
}

func NewBonusPlusClient(cc grpc.ClientConnInterface) BonusPlusClient {
	return &bonusPlusClient{cc}
}

func (c *bonusPlusClient) GetBonusPlus(ctx context.Context, in *User, opts ...grpc.CallOption) (*Plus, error) {
	out := new(Plus)
	err := c.cc.Invoke(ctx, BonusPlus_GetBonusPlus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BonusPlusServer is the server API for BonusPlus service.
// All implementations should embed UnimplementedBonusPlusServer
// for forward compatibility
type BonusPlusServer interface {
	GetBonusPlus(context.Context, *User) (*Plus, error)
}

// UnimplementedBonusPlusServer should be embedded to have forward compatible implementations.
type UnimplementedBonusPlusServer struct {
}

func (UnimplementedBonusPlusServer) GetBonusPlus(context.Context, *User) (*Plus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBonusPlus not implemented")
}

// UnsafeBonusPlusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BonusPlusServer will
// result in compilation errors.
type UnsafeBonusPlusServer interface {
	mustEmbedUnimplementedBonusPlusServer()
}

func RegisterBonusPlusServer(s grpc.ServiceRegistrar, srv BonusPlusServer) {
	s.RegisterService(&BonusPlus_ServiceDesc, srv)
}

func _BonusPlus_GetBonusPlus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonusPlusServer).GetBonusPlus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonusPlus_GetBonusPlus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonusPlusServer).GetBonusPlus(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// BonusPlus_ServiceDesc is the grpc.ServiceDesc for BonusPlus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BonusPlus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db.BonusPlus",
	HandlerType: (*BonusPlusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBonusPlus",
			Handler:    _BonusPlus_GetBonusPlus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
